include SugarCube::Adjust

class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    @window = Kiln::KilnWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)
    ctlr = MyController.new
    first = UINavigationController.alloc.initWithRootViewController(ctlr)
    @window.rootViewController = first
    @window.makeKeyAndVisible
    true
  end
end


Teacup::Stylesheet.new(:teacup) do
  style :label,
    color: :white,
    background: :clear,
    portrait: {
      text: 'portrait',
    },
    landscape: {
      text: 'landscape',
    },
    constraints: [
      :center_x,
      :center_y,
    ]

  style :button,
    constraints: [
      :center_x,
      constrain_below(:label).plus(0),
    ]

end


class MyController < UIViewController
  stylesheet :teacup

  layout do
    @label = subview(UILabel, :label)
    @button = subview(NiftyButton, :button)

    auto do
      metrics 'margin' => 20,
              'height' => 75,
              'top' => 95
      horizontal '|-margin-[label]-margin-|'
      horizontal '|-margin-[button]-margin-|'
      vertical '|-[label]-margin-[button]-margin-|'
    end
  end

  def viewDidAppear(animated)
    @label.text = 'testing'
  end

end


class NiftyButton < UIButton
  attr_accessor :text
  attr_accessor :font

  def foreground_color
    (@touched ? :black : :white).uicolor
  end

  def background_color
    (@touched ? :white : :black).uicolor
  end

  def drawRect(rect)
    background_color.setFill
    UIBezierPath.bezierPathWithRoundedRect(bounds, cornerRadius:5).fill

    foreground_color.uicolor.setFill
    UIBezierPath.bezierPathWithRoundedRect(bounds.shrink(2), cornerRadius:5).fill

    background_color.setFill
    text.drawAtPoint([5, 5], withFont: font)
  end

  def text
    @text || 'neat.'
  end

  def font
    @font || :bold.uifont
  end

  def intrinsicContentSize
    text.sizeWithFont(font).wider(10).taller(10)
  end

  def accessibilityLabel
    text
  end

  def touchesBegan(touches, withEvent:event)
    @touched = true
    setNeedsDisplay
  end

  def touchesEnded(touches, withEvent:event)
    @touched = false
    setNeedsDisplay
  end

  def touchesCancelled(touches, withEvent:event)
    @touched = false
    setNeedsDisplay
  end

  def self.kiln
    @kiln ||= {
      'Content' => {
        text: Kiln::TextEditor,
      }
    }
  end

end
